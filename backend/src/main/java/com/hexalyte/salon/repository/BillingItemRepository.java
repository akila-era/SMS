package com.hexalyte.salon.repository;

import com.hexalyte.salon.model.BillingItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface BillingItemRepository extends JpaRepository<BillingItem, Long> {
    
    // Find by billing
    @Query("SELECT bi FROM BillingItem bi WHERE bi.billing.billId = :billId ORDER BY bi.createdAt ASC")
    List<BillingItem> findByBillingIdOrderByCreatedAtAsc(@Param("billId") Long billId);
    
    // Find by service
    @Query("SELECT bi FROM BillingItem bi WHERE bi.service.id = :serviceId ORDER BY bi.createdAt DESC")
    List<BillingItem> findByServiceIdOrderByCreatedAtDesc(@Param("serviceId") Long serviceId);
    
    // Find by staff
    @Query("SELECT bi FROM BillingItem bi WHERE bi.staff.id = :staffId ORDER BY bi.createdAt DESC")
    List<BillingItem> findByStaffIdOrderByCreatedAtDesc(@Param("staffId") Long staffId);
    
    // Find by billing and staff
    @Query("SELECT bi FROM BillingItem bi WHERE bi.billing.billId = :billId AND bi.staff.id = :staffId ORDER BY bi.createdAt ASC")
    List<BillingItem> findByBillingIdAndStaffIdOrderByCreatedAtAsc(@Param("billId") Long billId, @Param("staffId") Long staffId);
    
    // Find by service and date range
    @Query("SELECT bi FROM BillingItem bi WHERE bi.service.id = :serviceId AND bi.billing.billDate BETWEEN :startDate AND :endDate ORDER BY bi.createdAt DESC")
    List<BillingItem> findByServiceIdAndDateRange(@Param("serviceId") Long serviceId, 
                                                 @Param("startDate") LocalDateTime startDate, 
                                                 @Param("endDate") LocalDateTime endDate);
    
    // Find by staff and date range
    @Query("SELECT bi FROM BillingItem bi WHERE bi.staff.id = :staffId AND bi.billing.billDate BETWEEN :startDate AND :endDate ORDER BY bi.createdAt DESC")
    List<BillingItem> findByStaffIdAndDateRange(@Param("staffId") Long staffId, 
                                               @Param("startDate") LocalDateTime startDate, 
                                               @Param("endDate") LocalDateTime endDate);
    
    // Find by branch and date range
    @Query("SELECT bi FROM BillingItem bi WHERE bi.billing.branch.id = :branchId AND bi.billing.billDate BETWEEN :startDate AND :endDate ORDER BY bi.createdAt DESC")
    List<BillingItem> findByBranchIdAndDateRange(@Param("branchId") Long branchId, 
                                                @Param("startDate") LocalDateTime startDate, 
                                                @Param("endDate") LocalDateTime endDate);
    
    // Find items where commission is not generated
    @Query("SELECT bi FROM BillingItem bi WHERE bi.commissionGenerated = false ORDER BY bi.createdAt ASC")
    List<BillingItem> findItemsWithUnprocessedCommission();
    
    // Find items where commission is not generated by branch
    @Query("SELECT bi FROM BillingItem bi WHERE bi.commissionGenerated = false AND bi.billing.branch.id = :branchId ORDER BY bi.createdAt ASC")
    List<BillingItem> findItemsWithUnprocessedCommissionByBranch(@Param("branchId") Long branchId);
    
    // Revenue by service
    @Query("SELECT bi.service.id, bi.service.name, bi.service.category, " +
           "COALESCE(SUM(bi.total), 0) as totalRevenue, COUNT(bi) as serviceCount " +
           "FROM BillingItem bi WHERE bi.billing.branch.id = :branchId AND bi.billing.status = 'PAID' " +
           "AND bi.billing.billDate BETWEEN :startDate AND :endDate " +
           "GROUP BY bi.service.id, bi.service.name, bi.service.category " +
           "ORDER BY totalRevenue DESC")
    List<Object[]> getServiceRevenueByBranchAndDateRange(@Param("branchId") Long branchId, 
                                                        @Param("startDate") LocalDateTime startDate, 
                                                        @Param("endDate") LocalDateTime endDate);
    
    // Revenue by staff
    @Query("SELECT bi.staff.id, bi.staff.firstName, bi.staff.lastName, bi.staff.employeeCode, bi.staff.designation, " +
           "COALESCE(SUM(bi.total), 0) as totalRevenue, COUNT(bi) as serviceCount, " +
           "COALESCE(SUM(CASE WHEN bi.service.commissionType = 'PERCENTAGE' THEN bi.total * bi.service.commissionRate / 100 " +
           "ELSE bi.service.fixedCommissionAmount END), 0) as totalCommission " +
           "FROM BillingItem bi WHERE bi.billing.branch.id = :branchId AND bi.billing.status = 'PAID' " +
           "AND bi.billing.billDate BETWEEN :startDate AND :endDate " +
           "GROUP BY bi.staff.id, bi.staff.firstName, bi.staff.lastName, bi.staff.employeeCode, bi.staff.designation " +
           "ORDER BY totalRevenue DESC")
    List<Object[]> getStaffRevenueByBranchAndDateRange(@Param("branchId") Long branchId, 
                                                      @Param("startDate") LocalDateTime startDate, 
                                                      @Param("endDate") LocalDateTime endDate);
    
    // Total revenue by branch
    @Query("SELECT COALESCE(SUM(bi.total), 0) FROM BillingItem bi WHERE bi.billing.branch.id = :branchId AND bi.billing.status = 'PAID'")
    BigDecimal getTotalRevenueByBranch(@Param("branchId") Long branchId);
    
    // Total revenue by branch and date range
    @Query("SELECT COALESCE(SUM(bi.total), 0) FROM BillingItem bi WHERE bi.billing.branch.id = :branchId AND bi.billing.status = 'PAID' " +
           "AND bi.billing.billDate BETWEEN :startDate AND :endDate")
    BigDecimal getTotalRevenueByBranchAndDateRange(@Param("branchId") Long branchId, 
                                                 @Param("startDate") LocalDateTime startDate, 
                                                 @Param("endDate") LocalDateTime endDate);
    
    // Count services by staff
    @Query("SELECT bi.staff.id, COUNT(bi) as serviceCount FROM BillingItem bi " +
           "WHERE bi.billing.branch.id = :branchId AND bi.billing.status = 'PAID' " +
           "AND bi.billing.billDate BETWEEN :startDate AND :endDate " +
           "GROUP BY bi.staff.id")
    List<Object[]> getServiceCountByStaffAndDateRange(@Param("branchId") Long branchId, 
                                                     @Param("startDate") LocalDateTime startDate, 
                                                     @Param("endDate") LocalDateTime endDate);
    
    // Find by service and staff
    @Query("SELECT bi FROM BillingItem bi WHERE bi.service.id = :serviceId AND bi.staff.id = :staffId ORDER BY bi.createdAt DESC")
    List<BillingItem> findByServiceIdAndStaffIdOrderByCreatedAtDesc(@Param("serviceId") Long serviceId, @Param("staffId") Long staffId);
    
    // Find by service, staff and date range
    @Query("SELECT bi FROM BillingItem bi WHERE bi.service.id = :serviceId AND bi.staff.id = :staffId " +
           "AND bi.billing.billDate BETWEEN :startDate AND :endDate ORDER BY bi.createdAt DESC")
    List<BillingItem> findByServiceIdAndStaffIdAndDateRange(@Param("serviceId") Long serviceId, 
                                                           @Param("staffId") Long staffId, 
                                                           @Param("startDate") LocalDateTime startDate, 
                                                           @Param("endDate") LocalDateTime endDate);
}
